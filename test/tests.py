# Array of tests to run (in order)
# Each test contains
#   description - 
#   steps - A list of steps to perform, each step can have
#       inputs - A list of tuples for the inputs to apply at that step
#       *time - The time (in ms) to wait before continuing to the next step 
#           and before checking expected values for this step. The time should be a multiple of
#           the period of the system
#       *iterations - The number of clock ticks to wait (periods)
#       expected - The expected value at the end of this step (after the "time" has elapsed.) 
#           If this value is incorrect the test will fail early before completing.
#       * only one of these should be used
#   expected - The expected output (as a list of tuples) at the end of this test
# An example set of tests is shown below. It is important to note that these tests are not "unit tests" in 
# that they are not ran in isolation but in the order shown and the state of the device is not reset or 
# altered in between executions (unless preconditions are used).
tests = [ 
    {'description': 'Test 1: PINA: 0x01 => PORTC: 0x60',
    'steps': [ {'inputs': [('PINA',0x01)], 'iterations': 1 } ],
    'expected': [('PORTC',0x60)],
    },
    {'description': 'Test 2: PINA: 0x02 => PORTC: 0x60',
    'steps': [ {'inputs': [('PINA',0x02)], 'iterations': 1 } ],
    'expected': [('PORTC',0x60)],
    },
    {'description': 'Test 3: PINA: 0x03 => PORTC: 0x70',
    'steps': [ {'inputs': [('PINA',0x03)], 'iterations': 1 } ],
    'expected': [('PORTC',0x70)],
    },
    {'description': 'Test 4: PINA: 0x04 => PORTC: 0x70',
    'steps': [ {'inputs': [('PINA',0x04)], 'iterations': 1 } ],
    'expected': [('PORTC',0x70)],
    },
    {'description': 'Test 5: PINA: 0x05 => PORTC: 0x38',
    'steps': [ {'inputs': [('PINA',0x05)], 'iterations': 1 } ],
    'expected': [('PORTC',0x38)],
    },
    {'description': 'Test 6: PINA: 0x06 => PORTC: 0x38',
    'steps': [ {'inputs': [('PINA',0x06)], 'iterations': 1 } ],
    'expected': [('PORTC',0x38)],
    },
    {'description': 'Test 7: PINA: 0x07 => PORTC: 0x3C',
    'steps': [ {'inputs': [('PINA',0x07)], 'iterations': 1 } ],
    'expected': [('PORTC',0x3C)],
    },
    {'description': 'Test 8: PINA: 0x08 => PORTC: 0x3C',
    'steps': [ {'inputs': [('PINA',0x08)], 'iterations': 1 } ],
    'expected': [('PORTC',0x3C)],
    },
    {'description': 'Test 9: PINA: 0x09 => PORTC: 0x3C',
    'steps': [ {'inputs': [('PINA',0x09)], 'iterations': 1 } ],
    'expected': [('PORTC',0x3C)],
    },
    {'description': 'Test 10: PINA: 0x0A => PORTC: 0x3E',
    'steps': [ {'inputs': [('PINA',0x0A)], 'iterations': 1 } ],
    'expected': [('PORTC',0x3E)],
    },
    {'description': 'Test 11: PINA: 0x0B => PORTC: 0x3E',
    'steps': [ {'inputs': [('PINA',0x0B)], 'iterations': 1 } ],
    'expected': [('PORTC',0x3E)],
    },
    {'description': 'Test 12: PINA: 0x0C => PORTC: 0x3E',
    'steps': [ {'inputs': [('PINA',0x0C)], 'iterations': 1 } ],
    'expected': [('PORTC',0x3E)],
    },
    {'description': 'Test 13: PINA: 0x0D => PORTC: 0x3F',
    'steps': [ {'inputs': [('PINA',0x0D)], 'iterations': 1 } ],
    'expected': [('PORTC',0x3F)],
    },
    {'description': 'Test 14: PINA: 0x0E => PORTC: 0x3F',
    'steps': [ {'inputs': [('PINA',0x0E)], 'iterations': 1 } ],
    'expected': [('PORTC',0x3F)],
    },
    {'description': 'Test 15: PINA: 0x0F => PORTC: 0x3F',
    'steps': [ {'inputs': [('PINA',0x0F)], 'iterations': 1 } ],
    'expected': [('PORTC',0x3F)],
    },

    {'description': 'Test 16: PINA: 0x31 => PORTC: 0x60',
    'steps': [ {'inputs': [('PINA',0x31)], 'iterations': 1 } ],
    'expected': [('PORTC',0xE0)],
    },
    {'description': 'Test 17: PINA: 0x32 => PORTC: 0x60',
    'steps': [ {'inputs': [('PINA',0x32)], 'iterations': 1 } ],
    'expected': [('PORTC',0xE0)],
    },
    {'description': 'Test 18: PINA: 0x33 => PORTC: 0x70',
    'steps': [ {'inputs': [('PINA',0x33)], 'iterations': 1 } ],
    'expected': [('PORTC',0xF0)],
    },
    {'description': 'Test 19: PINA: 0x34 => PORTC: 0x70',
    'steps': [ {'inputs': [('PINA',0x34)], 'iterations': 1 } ],
    'expected': [('PORTC',0xF0)],
    },
    {'description': 'Test 20: PINA: 0x35 => PORTC: 0x38',
    'steps': [ {'inputs': [('PINA',0x35)], 'iterations': 1 } ],
    'expected': [('PORTC',0xB8)],
    },
    {'description': 'Test 21: PINA: 0x36 => PORTC: 0x38',
    'steps': [ {'inputs': [('PINA',0x36)], 'iterations': 1 } ],
    'expected': [('PORTC',0xB8)],
    },
    {'description': 'Test 22: PINA: 0x37 => PORTC: 0x3C',
    'steps': [ {'inputs': [('PINA',0x37)], 'iterations': 1 } ],
    'expected': [('PORTC',0xBC)],
    },
    {'description': 'Test 23: PINA: 0x38 => PORTC: 0x3C',
    'steps': [ {'inputs': [('PINA',0x38)], 'iterations': 1 } ],
    'expected': [('PORTC',0xBC)],
    },
    {'description': 'Test 24: PINA: 0x39 => PORTC: 0x3C',
    'steps': [ {'inputs': [('PINA',0x39)], 'iterations': 1 } ],
    'expected': [('PORTC',0xBC)],
    },
    {'description': 'Test 25: PINA: 0x3A => PORTC: 0x3E',
    'steps': [ {'inputs': [('PINA',0x3A)], 'iterations': 1 } ],
    'expected': [('PORTC',0xBE)],
    },
    {'description': 'Test 26: PINA: 0x3B => PORTC: 0x3E',
    'steps': [ {'inputs': [('PINA',0x3B)], 'iterations': 1 } ],
    'expected': [('PORTC',0xBE)],
    },
    {'description': 'Test 27: PINA: 0x3C => PORTC: 0x3E',
    'steps': [ {'inputs': [('PINA',0x3C)], 'iterations': 1 } ],
    'expected': [('PORTC',0xBE)],
    },
    {'description': 'Test 28: PINA: 0x3D => PORTC: 0x3F',
    'steps': [ {'inputs': [('PINA',0x3D)], 'iterations': 1 } ],
    'expected': [('PORTC',0xBF)],
    },
    {'description': 'Test 29: PINA: 0x3E => PORTC: 0x3F',
    'steps': [ {'inputs': [('PINA',0x3E)], 'iterations': 1 } ],
    'expected': [('PORTC',0xBF)],
    },
    {'description': 'Test 30: PINA: 0x3F => PORTC: 0x3F',
    'steps': [ {'inputs': [('PINA',0x3F)], 'iterations': 1 } ],
    'expected': [('PORTC',0xBF)],
    },
    # {'description': 'This test will run second.',
    # 'steps': [ {'inputs': [('PIN', <val>)],'iterations': 1}, # Set PIN to val then run one iteration
    #     {'inputs': [('PIN',<val>)], 'time': 300 }, # Set PIN to val then run 300 ms
    #     {'inputs': [('PIN',<val>)], 'iterations': 1, 'expected': [('PORT',<val>)]}, 
    #     {'inputs': [('PIN',<val>)], 'time': 600}, ],
    # 'expected': [('PORT',<val>)],
    # },
    ]

# Optionally you can add a set of "watch" variables these need to be global or static and may need
# to be scoped at the function level (for static variables) if there are naming conflicts. The 
# variables listed here will display everytime you hit (and stop at) a breakpoint
watch = ['main::fuellevel']

